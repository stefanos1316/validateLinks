#!/bin/bash

# This script is responsible for identifying the broken links by sending http requests.
# As the first command line argument provide the directory to do the search, 
# if not by default it will be the current working directory.
# In the final report, we consider the links with HTTP status from 200-400 as valid.


# Text fonts
bold=$(tput bold)
underline=$(tput smul)
redlabel=$(tput setab 1)
greenlabel=$(tput setab 2)
yellowlabel=$(tput setab 3)
bluelabel=$(tput setab 4)
default=$(tput sgr0)


# Printing the manual page
if [ "$1" == "-h" -o "$1" == "--help" ]; then
	echo 
	echo ${bold}NAME${default}
	echo "	validateLinks"
	echo
	echo ${bold}SYNOPSIS${default}
	echo "	${bold}validateLinks${default} [${underline}OPTION${default}]... [${underline}DIRECTORY${default}]... [${underline}LINK${default}]..."
	echo
	echo "${bold}DESCRIPTION${default}"
	echo "	Performs links validation over a single web-page and identifies which links are broken and valide. Also, it can performe depth first search in a directory to validate all file's links. "
	echo "	If no option is given it validates all links found in the current working directory"
	echo
	echo "	${bold}-d${default} ${underline}directory-path${default}, ${bold}--directory${default} ${underline}directory-path${default}"
	echo
	echo "		provide the related or absolute path towards a directory to perform an analysis on its files"
	echo
	echo "	${bold}-l${default} ${underline}URL-address${default}, ${bold}--link${default} ${underline}URL-address${default}"
	echo
	echo "		provide a URL link to perform analysis on it"
	echo
	echo "	${bold}-P, --passing${default}"
	echo
	echo "		show all the links with response 2XX (Success)"
	echo
	echo "	${bold}-r, --recurive${default}"
	echo
	echo "		recursivily traverse all directories and analyses all file's links"
	echo
	echo "	${bold}-R, --redirection${default}"
	echo
	echo "		show all the links with response 3XX (Redirection)"
	echo
	echo "	${bold}-C, --clientError${default}"
	echo 
	echo "		show all the links with response 4XX (Client Error)"
	echo
	echo "	${bold}-S, --serverError${default}"
	echo
	echo "		show all the links with response 5XX (Server Error)"
	echo
	echo "	${bold}-v, --version${default}"	
	echo
	echo "		output version information and exit"
	echo
	echo "	${bold}-s, --statistics${default}"
	echo
	echo "		output statistics based on the collected results"
	echo 
	echo "	${bold}-h, --help${default}"
	echo
	echo "		display this help list and exit"
	echo
	echo "${bold}AUTHOR${default}"
	echo "	Written by Stefanos I. Georgiou"
	echo 
	echo "${bold}REPORTING BUGS${default}"
	echo "	Report validateLinks translation bugs to <https://github.com/stefanos1316/validateLinks/issues>"
	echo
	echo "${bold}COPYRIGHT${default}"
	echo "	Copyright Â© 2017 Free Software Foundation, Inc.  License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>."
        echo "	This is free software: you are free to change and redistribute it.  There is NO WARRANTY, to the extent permitted by law."
	echo

	exit
fi

# Retrieve all command line arguments using getopts
# Defining necessary variables
DIRECTORY=false
DIRECTORY_PATH=""
LINK=false
LINK_ADDRESS=""
PASSING=false
REDIRECTION=false
RECURSIVE=false
CLIENTERROR=false
SERVERERROR=false
VERSION=false
STATISTICS=false

# If there is no : after a letter it means the specific letter has no argument, if it has :: it means the particular has optional, and a : has required argument.
OPTIONS=`getopt -o d:l:PRrCSvs --long directory:,link:,passing,recursive,redirection,clientError,serverError,version,statistics -n 'validateLinks' -- "$@"`
eval set -- "$OPTIONS"
while true; do
	case "$1" in 
		-d|--directory) DIRECTORY=true ;
			case $2 in 
				*/*) DIRECTORY_PATH=$2 ; shift 2 ;;
				*) >&2 echo "[Error] Directory path was not provided." ; shift 2 ;;
			esac ;;
		-l|--link) LINK=true ;
			case $2 in 
				https* | http* | www*) LINK_ADDRESS=$2 ; shift 2 ;;
				*) >&2 echo "[Error] ULR address was not provided" ; shift 2;;
			esac ;;
		-P|--passing) PASSING=true ; shift ;;
		-r|--recursive) RECURSIVE=true ; shift ;;
		-R|--redirection) REDIRECTION=true ; shift ;;
		-C|--clientError) CLIENTERROR=true ; shift ;;
		-S|--serverError) SERVERERROR=true ; shift ;;
		-v|--version) VERSION=true ; shift ;;
		-s|--statistics) STATISTICS=true; shift ;;
		--) shift ; break ;;
		*) >&2 echo "Wrong command line argument, please try again." ; exit 1 ;;
	esac
done

STATUS_SUCCESS=0
STATUS_REDIRECT=0
STATUS_CLIENT_ERROR=0
STATUS_SERVER_ERROR=0

# Function declarations
function depth {

	#Do a small depth checking how deep into the tree we are
	k=0
	while [ $k -lt $1 ]; do
		echo -n 
		let k++
	done
}

function traverse {

	# Fix this one ...
	# ls "$1" | while read i
	while read i; 
	do
		depth $2
		if [ -d "$1/$i" ]
		then
			echo "=====================================================================" 
			echo ${bold}DIRECTORY${default}: $1/$i
			traverse "$1/$i" `expr $2 + 1`
		else
			#echo "---------------------------------------------------------------------" 
			echo FILE: $1/$i 
			getLinkStatus $1/$i
		fi
	done< <(ls "$1")
}

function printForTerminal {
	GETSTATUS=$(echo $1 | awk -F "|" '{print $2}')
	GETLINK=$(echo $1 | awk -F "|" '{print $3}')

	# Adding the color for invisible mode to make an awesome printing
 	if [ ! -z $GETSTATUS ]; then 
		if [ $GETSTATUS -lt 300 ]; then
			echo -e "	|-${greenlabel}$GETSTATUS${default}-| $GETLINK"	
		elif [ $GETSTATUS -lt 400 ]; then
			echo -e "	|-${yellowlabel}$GETSTATUS${default}-| $GETLINK"	
		elif [ $GETSTATUS -lt 500 ]; then
			echo -e "	|-${redlabel}$GETSTATUS${default}-| $GETLINK"
		elif [ $GETSTATUS -lt 600 ]; then
			echo -e "	|-${bluelabel}$GETSTATUS${default}-| $GETLINK"
		else
			echo "Unknow option..."
		fi
	fi
}

function getLinkStatus {

while read LINE; do
   URL=$(curl -o /dev/null --silent --head --write-out "|%{http_code}| $LINE\n" "$LINE")

   if [[ ${URL} != *"|000|"* ]]; then 
	if [ ${PASSING} = true ] && [[ ${URL} != *"|000|"* ]] ; then 
		if [[ ${URL} == *"|2"*"|"* ]]; then
			printForTerminal "$URL"
			increaseStatus $URL
		fi
	fi
	if [ ${REDIRECTION} = true ]; then 
		if [[ ${URL} == *"|3"*"|"* ]]; then
			printForTerminal "$URL"
			increaseStatus $URL
		fi
	fi
	if [ ${CLIENTERROR} = true ]; then 
		if [[ ${URL} == *"|4"*"|"* ]]; then
			printForTerminal "$URL"
			increaseStatus $URL
		fi
	fi
	if [ ${SERVERERROR} = true ]; then 
		if [[ ${URL} == *"|5"*"|"* ]]; then
			printForTerminal "$URL"
			increaseStatus $URL
		fi
	fi
	if [ ${PASSING} != true -a ${REDIRECTION} != true -a ${CLIENTERROR} != true -a ${SERVERERROR} != true ]; then
                printForTerminal "$URL"
        	increaseStatus $URL
        fi	

   fi 	
done< <(egrep -ro 'https?://[^ ]+' $1 | sort | awk -F ":" '{print $1":"$2}' | tr -d '}*' | tr -d ',")(;}*' | sed 's/\.$//' | sed 's/>.*//' | uniq )
}

function increaseStatus {

	STATUS=$(echo $1 | awk -F "|" '{print $2}')
	
	if [ ! -z $STATUS ]; then 
		# This long case statement is responsible for increasing the STATUS variable counts
 		if [ $STATUS -lt 300 ]; then
			((++STATUS_SUCCESS))
		elif [ $STATUS -lt 400 ]; then
			((++STATUS_REDIRECT))
		elif [ $STATUS -lt 500 ]; then
			((++STATUS_CLIENT_ERROR))
		elif [ $STATUS -lt 600 ]; then
			((++STATUS_SERVER_ERROR))
		else
			echo "Such status don't exist."
		fi
	fi
}

function getLinksFromLink { 

while  read LINE; do
	URL=$(curl -s -r /dev/null --silent --head --write-out "|%{http_code}| $LINE\n" "$LINE" --output /dev/null)
  	if [[ ${URL} != *"|000|"* ]]; then 
        	printForTerminal "$URL"
   		increaseStatus $URL
	fi
done< <(lynx -dump $1 | grep -A999 "^References$" | tail -n +3 | awk '{print $2 }')
}


function printReports {

	# Calculating total link's validity
	TOTAL=$((STATUS_SUCCESS+STATUS_REDIRECT+STATUS_CLIENT_ERROR+STATUS_SERVER_CLIENT))
	TOTAL_VALIDITY=$(echo "scale=2; ((($STATUS_SUCCESS + $STATUS_REDIRECT)) / $TOTAL) * 100" | bc)
	
	echo 
	echo 
	echo "Total link's STATUS"
	echo "===================" 
	echo "${greenlabel}$STATUS_SUCCESS${default} Success links" 
	echo "${yellowlabel}$STATUS_REDIRECT${default} Redirection links" 
	echo "${redlabel}$STATUS_CLIENT_ERROR${default} Client error links" 
	echo "${bluelabel}$STATUS_SERVER_ERROR${default} Server error links"
	echo "Total link's validity: $TOTAL_VALIDITY%"
}

# If user didn't provide us with a directory or executable we search the current working directory
if [ "${DIRECTORY}" != true -a "${LINK}" != true ]; then
	for file in *
	do
    		if [[ -f $file ]]; then
			getLinkStatus $file
    		fi
	done
else
	if [ ${DIRECTORY} = true -a ${RECURSIVE} = true ]; then
		traverse $DIRECTORY_PATH 0

	else
		for file in `ls ${DIRECTORY_PATH}`
        	do
			PATH_FILE="${DIRECTORY_PATH}/${file}"
                	if [[ -f $PATH_FILE ]]; then
                        	echo FILE: $PATH_FILE
				getLinkStatus $PATH_FILE
                	fi
        	done
	fi

	if [ ${LINK} = true ]; then 
		getLinksFromLink ${LINK_ADDRESS}
	fi
fi

if [ ${STATISTICS} = true ]; then
	printReports
fi

exit
